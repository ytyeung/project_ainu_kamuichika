{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from google import genai\n",
    "from google.genai import types\n",
    "from dotenv import load_dotenv\n",
    "from pydantic import BaseModel, Field\n",
    "import json\n",
    "\n",
    "import unicodedata\n",
    "import re\n",
    "\n",
    "from pydantic import BaseModel, Field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "load_dotenv()\n",
    "project_name = os.getenv('PROJECT_NAME')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Translation(BaseModel):\n",
    "    \"\"\"The updated translation, and the comments for the update\"\"\"\n",
    "    updated_translation: str = Field(description=\"The updated translation\")\n",
    "    comment: str = Field(description=\"Comments on the translation update\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "system_instruction_prompt = \"\"\"You are a professional translator. You know Japanese, English and Chinese. You can translate Japanese into either Chinese or English.\"\"\"\n",
    "\n",
    "client = genai.Client(\n",
    "      vertexai=True,\n",
    "      project=project_name,\n",
    "      location=\"us-central1\",\n",
    ")\n",
    "\n",
    "model = \"gemini-2.0-flash-001\"\n",
    "\n",
    "generate_content_config = types.GenerateContentConfig(\n",
    "    temperature = 0,\n",
    "    top_p = 0,\n",
    "    max_output_tokens = 8192,\n",
    "    response_mime_type = 'application/json',\n",
    "    response_schema = Translation,\n",
    "    safety_settings = [types.SafetySetting(\n",
    "      category=\"HARM_CATEGORY_HATE_SPEECH\",\n",
    "      threshold=\"OFF\"\n",
    "    ),types.SafetySetting(\n",
    "      category=\"HARM_CATEGORY_DANGEROUS_CONTENT\",\n",
    "      threshold=\"OFF\"\n",
    "    ),types.SafetySetting(\n",
    "      category=\"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n",
    "      threshold=\"OFF\"\n",
    "    ),types.SafetySetting(\n",
    "      category=\"HARM_CATEGORY_HARASSMENT\",\n",
    "      threshold=\"OFF\"\n",
    "    )],\n",
    "    system_instruction=[types.Part.from_text(text=system_instruction_prompt)],\n",
    "  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reflection_prompt = \"\"\"You are translating the following Japanese text into Chinese. You have an initial Chinese translation and an initial English translation.\n",
    "\n",
    "Criticise the Chinese translation based on the Japanese text. Compare the Chinese translation with the English translation.\n",
    "\n",
    "Improve the Chinese translation. Keep the originial Japanese meanings. Use a more conversational style. Display in Traditional Chinese.\n",
    "\n",
    "This is the Japanese text.\n",
    "{japanese_text}\n",
    "\n",
    "This is the initial Chinese translation.\n",
    "{chinese_translation}\n",
    "\n",
    "This is the English translation.\n",
    "{english_translation}\n",
    "\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate(client: genai.Client,generate_content_config :types.GenerateContentConfig,model :str, /, prompt :str):\n",
    "\n",
    "    text_full_prompt = text1 = types.Part.from_text(text=f\"{prompt}\")\n",
    "\n",
    "    output = \"\"\n",
    "\n",
    "    contents = [\n",
    "      types.Content(\n",
    "        role=\"user\",\n",
    "        parts=[\n",
    "          text_full_prompt\n",
    "        ]\n",
    "      )\n",
    "    ]\n",
    "\n",
    "    for chunk in client.models.generate_content_stream(\n",
    "        model = model,\n",
    "        contents = contents,\n",
    "        config = generate_content_config,\n",
    "        ):\n",
    "        print(chunk.text, end=\"\")\n",
    "        output += chunk.text\n",
    "\n",
    "    return output\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(f\"raw_translations_main_text_json/Chiri_Yukie_prologue.json\", \"r\", encoding=\"utf8\") as f:\n",
    "    data_dict = json.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the markdown template for writing the Chinese translations to Markdown file\n",
    "\n",
    "#read in the template\n",
    "with open(\"templates/iter1_output_md_template\", \"r\", encoding=\"utf8\") as f:\n",
    "    md_template = f.read()\n",
    "    md_template = unicodedata.normalize('NFKC', md_template)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "reflection_prompt_formatted = reflection_prompt.format(japanese_text=data_dict['japanese_translation'],chinese_translation=data_dict['chinese_translation'],english_translation=data_dict['english_translation'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"comment\": \"The initial Chinese translation is generally accurate but a bit too formal and literal. It lacks the emotional depth and conversational tone present in the Japanese original. The English translation captures the essence and emotional nuances better. The revised Chinese translation aims to address these issues by using more natural and evocative language, and by incorporating elements that reflect the Ainu culture's connection to nature and their sense of loss.\",\n",
      "  \"updated_translation\": \"序\\n\\n很久很久以前，這片廣闊的北海道，是我們祖先自由自在的天地。他們就像天真爛漫的孩子，被美麗的大自然擁抱著，無憂無慮地生活，真是大自然的寵兒，多麼令人稱羨的生活啊！\\n\\n在寒冷的冬天，他們踢開覆蓋森林的厚厚積雪，不畏懼那冰凍天地的寒氣，翻山越嶺地去獵熊；在涼風徐徐的夏天，他們在綠波蕩漾的海面上，與海鷗的歌聲為伴，划著像樹葉般的小船，整天辛勤地捕魚；在百花盛開的春天，他們沐浴在溫暖的陽光下，與不停歌唱的小鳥一同嬉戲，採集蕗和蓬；在紅葉似火的秋天，他們撥開被秋風吹拂、穗頭飽滿的芒草，直到深夜捕鮭魚的篝火都已熄滅，在山谷間迴盪的鹿鳴聲中，對著皎潔的月亮編織著美麗的夢想。啊，那是多麼快樂的生活啊！那和平寧靜的時光，如今都已成為過往雲煙。夢想破滅至今已數十年，這片土地經歷了快速的變遷，山野變成了村莊，村莊又變成了城鎮，一步步地被開墾發展。\\n\\n太古時代那原始的自然風貌，不知在何時已經悄然褪色，曾經在田野山林間快樂生活的人們，如今又都去了哪裡呢？僅存的我們這些族人，對於這不斷變化的世界，只能睜大眼睛，感到驚訝和茫然。而且，從我們的眼神中，已經失去了昔日祖先那種被宗教情懷所支配的美麗靈魂的光輝，取而代之的是不安和不滿，變得遲鈍而黯淡，看不清未來的方向，不得不依靠別人的憐憫，這是多麼可悲的模樣啊！唉，這正在消逝的事物……這就是我們現在的名字，我們背負著多麼悲傷的名字啊！\\n\\n很久以前，我們那些幸福的祖先，一定連想都沒想到，自己深愛的這片故土，最終會變成如此淒涼的景象吧。\\n\\n時間不停地流逝，世界不斷地發展。在這激烈的競爭場中，即使現在的我們正暴露著失敗的醜態，但總有一天，如果能出現兩三位堅強的人，我們也能夠跟上時代的步伐，與世界並肩前行吧。這真的是我們最迫切的願望，也是我們日夜不停祈禱的事情。\\n\\n但是……我們敬愛的祖先，為了在日常生活中彼此溝通而使用的那些古老的語言，那些被傳承下來的美麗詞語，難道也要隨著我們這些弱者一同消失殆盡嗎？啊，這實在是太令人悲痛和惋惜了！\\n\\n我身為阿伊努人，在阿伊努語的環境中長大，每當在下雨的夜晚，下雪的夜晚，只要有空閒，就會聚集在一起，用我笨拙的筆，記錄下我們的祖先所講述的無數故事中，極小的一部分。\\n\\n如果能讓更多了解我們的人讀到這些文字，我將與我的阿伊努同胞和祖先們一同，感受到無比的喜悅和至上的幸福。\\n\\n大正十一年三月一日\\n\\n知里幸惠\"\n",
      "}"
     ]
    }
   ],
   "source": [
    "updated_translation = generate(client,generate_content_config,model,prompt = reflection_prompt_formatted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "序\n",
      "\n",
      "很久很久以前，這片廣闊的北海道，是我們祖先自由自在的天地。他們就像天真爛漫的孩子，被美麗的大自然擁抱著，無憂無慮地生活，真是大自然的寵兒，多麼令人稱羨的生活啊！\n",
      "\n",
      "在寒冷的冬天，他們踢開覆蓋森林的厚厚積雪，不畏懼那冰凍天地的寒氣，翻山越嶺地去獵熊；在涼風徐徐的夏天，他們在綠波蕩漾的海面上，與海鷗的歌聲為伴，划著像樹葉般的小船，整天辛勤地捕魚；在百花盛開的春天，他們沐浴在溫暖的陽光下，與不停歌唱的小鳥一同嬉戲，採集蕗和蓬；在紅葉似火的秋天，他們撥開被秋風吹拂、穗頭飽滿的芒草，直到深夜捕鮭魚的篝火都已熄滅，在山谷間迴盪的鹿鳴聲中，對著皎潔的月亮編織著美麗的夢想。啊，那是多麼快樂的生活啊！那和平寧靜的時光，如今都已成為過往雲煙。夢想破滅至今已數十年，這片土地經歷了快速的變遷，山野變成了村莊，村莊又變成了城鎮，一步步地被開墾發展。\n",
      "\n",
      "太古時代那原始的自然風貌，不知在何時已經悄然褪色，曾經在田野山林間快樂生活的人們，如今又都去了哪裡呢？僅存的我們這些族人，對於這不斷變化的世界，只能睜大眼睛，感到驚訝和茫然。而且，從我們的眼神中，已經失去了昔日祖先那種被宗教情懷所支配的美麗靈魂的光輝，取而代之的是不安和不滿，變得遲鈍而黯淡，看不清未來的方向，不得不依靠別人的憐憫，這是多麼可悲的模樣啊！唉，這正在消逝的事物……這就是我們現在的名字，我們背負著多麼悲傷的名字啊！\n",
      "\n",
      "很久以前，我們那些幸福的祖先，一定連想都沒想到，自己深愛的這片故土，最終會變成如此淒涼的景象吧。\n",
      "\n",
      "時間不停地流逝，世界不斷地發展。在這激烈的競爭場中，即使現在的我們正暴露著失敗的醜態，但總有一天，如果能出現兩三位堅強的人，我們也能夠跟上時代的步伐，與世界並肩前行吧。這真的是我們最迫切的願望，也是我們日夜不停祈禱的事情。\n",
      "\n",
      "但是……我們敬愛的祖先，為了在日常生活中彼此溝通而使用的那些古老的語言，那些被傳承下來的美麗詞語，難道也要隨著我們這些弱者一同消失殆盡嗎？啊，這實在是太令人悲痛和惋惜了！\n",
      "\n",
      "我身為阿伊努人，在阿伊努語的環境中長大，每當在下雨的夜晚，下雪的夜晚，只要有空閒，就會聚集在一起，用我笨拙的筆，記錄下我們的祖先所講述的無數故事中，極小的一部分。\n",
      "\n",
      "如果能讓更多了解我們的人讀到這些文字，我將與我的阿伊努同胞和祖先們一同，感受到無比的喜悅和至上的幸福。\n",
      "\n",
      "大正十一年三月一日\n",
      "\n",
      "知里幸惠\n",
      "The initial Chinese translation is generally accurate but a bit too formal and literal. It lacks the emotional depth and conversational tone present in the Japanese original. The English translation captures the essence and emotional nuances better. The revised Chinese translation aims to address these issues by using more natural and evocative language, and by incorporating elements that reflect the Ainu culture's connection to nature and their sense of loss.\n"
     ]
    }
   ],
   "source": [
    "updated_translation_dict = json.loads(updated_translation)\n",
    "print(updated_translation_dict['updated_translation'])\n",
    "print(updated_translation_dict['comment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dict['updated_chinese_translation'] = updated_translation_dict['updated_translation']\n",
    "data_dict['update_comment'] = updated_translation_dict['comment']\n",
    "\n",
    "md_output = md_template.format(translated_language=\"Chinese\", ainu_title=data_dict['ainu_title'],\n",
    "                formatted_prompt=reflection_prompt_formatted,\n",
    "                japanese_title=data_dict['japanese_title'], input_japanese = data_dict['japanese_translation'],\n",
    "                output= f\"{data_dict['updated_chinese_translation']}\\n\\n{data_dict['update_comment']}\")\n",
    "\n",
    "with open(f\"updated_translations_main_text_iter1/Chinese_Translation_JSON/Chiri_Yukie_prologue.json\", \"w\", encoding=\"utf8\") as f:\n",
    "    json.dump(data_dict, f, ensure_ascii=False, indent=4)\n",
    "\n",
    "with open(f\"updated_translations_main_text_iter1/Chinese_Translation/Chiri_Yukie_prologue.md\", \"w\", encoding=\"utf8\") as f:\n",
    "    f.write(md_output)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "llama",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
